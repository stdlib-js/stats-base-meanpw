{
  "version": 3,
  "sources": ["../lib/meanpw.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gsumpw = require( '@stdlib/blas-ext-base-gsumpw' );\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array using pairwise summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = meanpw( N, x, 1 );\n* // returns ~0.3333\n*/\nfunction meanpw( N, x, stride ) {\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\treturn gsumpw( N, x, stride ) / N;\n}\n\n\n// EXPORTS //\n\nmodule.exports = meanpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gsumpw = require( '@stdlib/blas-ext-base-gsumpw' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array using pairwise summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = meanpw( N, x, 2, 1 );\n* // returns 1.25\n*/\nfunction meanpw( N, x, stride, offset ) {\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\treturn gsumpw( N, x, stride, offset ) / N;\n}\n\n\n// EXPORTS //\n\nmodule.exports = meanpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar meanpw = require( './meanpw.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( meanpw, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = meanpw;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arithmetic mean of a strided array using pairwise summation.\n*\n* @module @stdlib/stats-base-meanpw\n*\n* @example\n* var meanpw = require( '@stdlib/stats-base-meanpw' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = meanpw( N, x, 1 );\n* // returns ~0.3333\n*\n* @example\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var meanpw = require( '@stdlib/stats-base-meanpw' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = meanpw.ndarray( N, x, 2, 1 );\n* // returns 1.25\n*/\n\n// MODULES //\n\nvar meanpw = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = meanpw;\n\n// exports: { \"ndarray\": \"meanpw.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,8BAA+B,EAoBrD,SAASC,EAAQC,EAAGC,EAAGC,EAAS,CAC/B,OAAKF,GAAK,EACF,IAEHA,IAAM,GAAKE,IAAW,EACnBD,EAAG,CAAE,EAENH,EAAQE,EAAGC,EAAGC,CAAO,EAAIF,CACjC,CAKAH,EAAO,QAAUE,ICvDjB,IAAAI,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,8BAA+B,EAAE,QAuBvD,SAASC,EAAQC,EAAGC,EAAGC,EAAQC,EAAS,CACvC,OAAKH,GAAK,EACF,IAEHA,IAAM,GAAKE,IAAW,EACnBD,EAAGE,CAAO,EAEXL,EAAQE,EAAGC,EAAGC,EAAQC,CAAO,EAAIH,CACzC,CAKAH,EAAO,QAAUE,IC1DjB,IAAAK,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAS,IACTC,EAAU,IAKdF,EAAaC,EAAQ,UAAWC,CAAQ,EAKxCH,EAAO,QAAUE,ICajB,IAAIE,EAAS,IAKb,OAAO,QAAUA",
  "names": ["require_meanpw", "__commonJSMin", "exports", "module", "gsumpw", "meanpw", "N", "x", "stride", "require_ndarray", "__commonJSMin", "exports", "module", "gsumpw", "meanpw", "N", "x", "stride", "offset", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "meanpw", "ndarray", "meanpw"]
}
